{"version":3,"sources":["components/Cell/Cell.tsx","components/Board/Board.tsx","components/Game/Game.tsx","App.tsx","index.tsx"],"names":["Cell","props","value","clickOnCell","type","className","onClick","Board","cells","map","cell","i","uuid","whoIsWinner","lines","length","x","y","z","Game","playerOne","playerTwo","useState","Array","fill","setCells","xIsNext","setXisNext","isWinner","setIsWinner","playerOneWin","setPlayerOneWin","playerTwoWin","setPlayerTwoWin","winner","isDraw","some","item","status","current","cellsCopy","App","setPlayerOne","setPlayerTwo","goToPlay","setGoToPlay","checkFirstName","setCheckFirstName","checkSecondName","setCheckSecondName","onSubmit","event","preventDefault","trim","classNames","placeholder","onChange","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15b4b98e.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.scss';\n\ntype Props = {\n  value: string;\n  clickOnCell: () => void;\n};\n\nexport const Cell: React.FC<Props> = (props) => {\n  const { value, clickOnCell } = props;\n\n  return (\n    <button\n      type=\"button\"\n      className=\"Cell\"\n      onClick={clickOnCell}\n    >\n      {value}\n    </button>\n  );\n};\n","import React from 'react';\nimport { uuid } from 'uuidv4';\nimport { Cell } from '../Cell/Cell';\nimport './Board.scss';\n\ntype Props = {\n  cells: string[];\n  clickOnCell: (i: number) => void;\n};\n\nexport const Board: React.FC<Props> = (props) => {\n  const { cells, clickOnCell } = props;\n\n  return (\n    <div className=\"Board\">\n      {cells.map((cell, i) => (\n        <Cell\n          value={cell}\n          key={uuid()}\n          clickOnCell={() => {\n            clickOnCell(i);\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './Game.scss';\nimport { Board } from '../Board/Board';\n\nconst whoIsWinner = (cells: string[]) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [x, y, z] = lines[i];\n\n    if (cells[x] && cells[x] === cells[y] && cells[x] === cells[z]) {\n      return cells[x];\n    }\n  }\n\n  return null;\n};\n\ntype Props = {\n  playerOne: string;\n  playerTwo: string;\n};\n\nexport const Game: React.FC<Props> = (props) => {\n  const {\n    playerOne,\n    playerTwo,\n  } = props;\n\n  const [cells, setCells] = useState<string[]>(Array(9).fill(null));\n  const [xIsNext, setXisNext] = useState(true);\n  const [isWinner, setIsWinner] = useState(true);\n  const [playerOneWin, setPlayerOneWin] = useState(0);\n  const [playerTwoWin, setPlayerTwoWin] = useState(0);\n\n  const winner: string | null = whoIsWinner(cells);\n  const isDraw = cells.some(item => item === null);\n  let status = '';\n\n  const handleClick = (i: number) => {\n    const cellsCopy = [...cells];\n    const isWinnerNow = whoIsWinner(cellsCopy);\n\n    if (isWinnerNow || cellsCopy[i]) {\n      return;\n    }\n\n    cellsCopy[i] = xIsNext ? 'X' : 'O';\n\n    setCells(cellsCopy);\n    setXisNext(!xIsNext);\n  };\n\n  const handleResetClick = () => {\n    setCells(Array(9).fill(null));\n    setIsWinner(true);\n  };\n\n  if (winner === 'X') {\n    status = `Winner is ${playerOne}!`;\n    if (isWinner) {\n      setPlayerOneWin(current => current + 1);\n      setIsWinner(false);\n    }\n  } else if (winner === 'O') {\n    status = `Winner is ${playerTwo}!`;\n    if (isWinner) {\n      setPlayerTwoWin(current => current + 1);\n      setIsWinner(false);\n    }\n  } else if (!isDraw) {\n    status = 'Draw!';\n  } else {\n    status = xIsNext ? `Next move: ${playerOne}` : `Next move: ${playerTwo}`;\n  }\n\n  return (\n    <div className=\"Game\">\n      <Board\n        cells={cells}\n        clickOnCell={handleClick}\n      />\n      <div className=\"Game__info Info\">\n        <button\n          type=\"button\"\n          className=\"Game__button\"\n          onClick={handleResetClick}\n        >\n          Reset\n        </button>\n        <div className=\"Game__status\">\n          <p>{status}</p>\n        </div>\n        <div>\n          <p>Score</p>\n          <p>{`${playerOne} (X) wins: ${playerOneWin}`}</p>\n          <p>{`${playerTwo} (O) wins: ${playerTwoWin}`}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport { Game } from './components/Game/Game';\n\nexport const App: React.FC = () => {\n  const [playerOne, setPlayerOne] = useState('');\n  const [playerTwo, setPlayerTwo] = useState('');\n  const [goToPlay, setGoToPlay] = useState(false);\n  const [checkFirstName, setCheckFirstName] = useState(false);\n  const [checkSecondName, setCheckSecondName] = useState(false);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!playerOne.trim()) {\n      setCheckFirstName(true);\n    } else {\n      setCheckFirstName(false);\n    }\n\n    if (!playerTwo.trim()) {\n      setCheckSecondName(true);\n    } else {\n      setCheckSecondName(false);\n    }\n\n    if (playerOne.trim() && playerTwo.trim()) {\n      setGoToPlay(!goToPlay);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {goToPlay\n        ? (\n          <Game\n            playerOne={playerOne}\n            playerTwo={playerTwo}\n          />\n        )\n        : (\n          <form\n            className=\"App__form\"\n            onSubmit={handleSubmit}\n          >\n            <p className=\"App__title-input\">Enter first player name (X): </p>\n            <input\n              type=\"text\"\n              className={classNames('App__input', { 'App__input-error': checkFirstName })}\n              placeholder=\"Player one (x)\"\n              value={playerOne}\n              onChange={(event) => setPlayerOne(event.target.value)}\n            />\n            <div className=\"App__check-input\">\n              {checkFirstName && (\n                <p className=\"App__check-input-text\">*please enter a name</p>\n              )}\n            </div>\n            <p className=\"App__title-input\">Enter second player name (O): </p>\n            <input\n              type=\"text\"\n              className={classNames('App__input', { 'App__input-error': checkSecondName })}\n              placeholder=\"Player two (0)\"\n              value={playerTwo}\n              onChange={(event) => setPlayerTwo(event.target.value)}\n            />\n            <div className=\"App__check-input\">\n              {checkSecondName && (\n                <p className=\"App__check-input-text\">*please enter a name</p>\n              )}\n            </div>\n            <button\n              type=\"submit\"\n              className=\"App__button-form\"\n            >\n              Enter players name\n            </button>\n          </form>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}